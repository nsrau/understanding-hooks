{"version":3,"sources":["components/memo/ListItem.js","components/memo/List.js","components/useMemo/Counter.js","App.js","index.js"],"names":["memo","item","title","body","useState","list","setList","search","setSearch","useEffect","fetch","then","response","json","placeholder","value","onChange","e","target","map","key","id","Counter","counterOne","setCounterOne","counterTwo","setCounterTwo","isEven","useMemo","i","onClick","App","basename","className","to","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PASeA,sBAPf,YAA6B,IAATC,EAAQ,EAARA,KAEhB,OACI,4BAAI,gCAASA,EAAKC,OAAlB,IAAkC,2BAAID,EAAKE,UCmCpCH,sBArCf,WAAiB,IAAD,EACYI,mBAAS,IADrB,mBACLC,EADK,KACCC,EADD,OAEgBF,mBAAS,IAFzB,mBAELG,EAFK,KAEGC,EAFH,KAUZ,OANAC,qBAAU,WACNC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIP,EAAQO,QAC3B,IAGC,oCAEI,khBAQA,6BACA,2BACIC,YAAY,SACZC,MAAOR,EACPS,SAAU,SAAAC,GAAC,OAAIT,EAAUS,EAAEC,OAAOH,UAGtC,4BAEQV,EAAKc,KAAI,SAAAlB,GAAI,OAAI,kBAAC,EAAD,CAAUmB,IAAKnB,EAAKoB,GAAIpB,KAAMA,YC/BpD,SAASqB,IAAW,IAAD,EACMlB,mBAAS,GADf,mBACvBmB,EADuB,KACXC,EADW,OAEMpB,mBAAS,GAFf,mBAEvBqB,EAFuB,KAEXC,EAFW,KAYxBC,EAASC,mBAAQ,WAEnB,IADA,IAAIC,EAAI,EACDA,EAAI,WAAWA,IACtB,OAAON,EAAa,IAAM,IAC3B,CAACA,IAEJ,OACI,6BACI,mjBASA,6BACA,4BACIO,QA3BS,WACjBN,EAAcD,EAAa,KAyBvB,kBAEiBA,GAbrB,IAa2CI,EAAS,OAAS,MACzD,6BACA,4BACIG,QA3BS,WACjBJ,EAAcD,EAAa,KAyBvB,aAEYA,I,MC1BT,SAASM,IACtB,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,kBAAC,IAAD,KACE,oCACE,yBAAKC,UAAU,QACb,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,SAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,cAIN,yBAAKD,UAAU,WAGb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAACb,EAAD,OAEF,kBAAC,IAAD,CAAOa,KAAK,KACV,uDClChBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.a9d085ee.chunk.js","sourcesContent":["import React, { memo } from 'react'\n\nfunction ListItem({ item }) {\n\n    return (\n        <li><strong>{item.title}</strong> <i>{item.body}</i></li>\n    )\n}\n\nexport default memo(ListItem)\n","import React, { memo, useEffect, useState } from 'react'\nimport ListItem from './ListItem';\n\nfunction List() {\n    const [list, setList] = useState([]);\n    const [search, setSearch] = useState('')\n\n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/posts')\n            .then(response => response.json())\n            .then(json => setList(json))\n    }, [])\n\n    return (\n        <>\n\n            <p>\n                React.memo is a higher order component.\n\n                If your component renders the same result given the same props, you can wrap it in a call to React.memo for a performance boost in some cases by memoizing the result. This means that React will skip rendering the component, and reuse the last rendered result.\n\n                React.memo only checks for prop changes. If your function component wrapped in React.memo has a useState or useContext Hook in its implementation, it will still rerender when state or context change.\n            </p>\n\n            <hr />\n            <input\n                placeholder=\"search\"\n                value={search}\n                onChange={e => setSearch(e.target.value)}\n            />\n\n            <ul>\n                {\n                    list.map(item => <ListItem key={item.id} item={item} />)\n                }\n            </ul>\n\n        </>\n    )\n}\nexport default memo(List)","import React, { useState, useMemo } from 'react'\n\nexport default function Counter() {\n    const [counterOne, setCounterOne] = useState(0)\n    const [counterTwo, setCounterTwo] = useState(0)\n\n    const incrementOne = () => {\n        setCounterOne(counterOne + 1)\n    }\n\n    const incrementTwo = () => {\n        setCounterTwo(counterTwo + 1)\n    }\n\n    const isEven = useMemo(() => {\n        let i = 0\n        while (i < 999999999) i++\n        return counterOne % 2 === 0\n    }, [counterOne])\n\n    return (\n        <div>\n            <p>\n                Returns a memoized value.\n\n                Pass a “create” function and an array of dependencies. useMemo will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.\n\n                Remember that the function passed to useMemo runs during rendering. Don’t do anything there that you wouldn’t normally do while rendering. For example, side effects belong in useEffect, not useMemo.\n\n                If no array is provided, a new value will be computed on every render.\n            </p>\n            <hr />\n            <button\n                onClick={incrementOne}\n            >counter slow - {counterOne}</button> {isEven ? 'Even' : 'Odd'}\n            <hr />\n            <button\n                onClick={incrementTwo}\n            >counter - {counterTwo}</button>\n        </div>\n    )\n}\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  HashRouter\n} from \"react-router-dom\";\nimport List from './components/memo/List';\nimport Counter from './components/useMemo/Counter';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <HashRouter basename='/'>\n      <Router>\n        <>\n          <nav className=\"menu\">\n            <ul>\n              <li>\n                <Link to=\"/memo\">memo</Link>\n              </li>\n              <li>\n                <Link to=\"/useMemo\">useMemo</Link>\n              </li>\n            </ul>\n          </nav>\n          <div className=\"content\">\n            {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n            <Switch>\n              <Route path=\"/memo\">\n                <List />\n              </Route>\n              <Route path=\"/useMemo\">\n                <Counter />\n              </Route>\n              <Route path=\"/\">\n                <p>use react profiler</p>\n              </Route>\n            </Switch>\n          </div>\n        </>\n      </Router>\n    </HashRouter>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}